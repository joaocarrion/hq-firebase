rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /public/latest/{document=**} {
      allow read: if request.auth != null;
    }
        
    match /user_profiles/{$id} {
    	allow read, write: if request.auth.uid == $id
    }

    match /invitations/{$id} {
      allow read: if request.auth != null 
                  && request.auth.token.email == resource.data.email;

      allow create: if canInvite(request.resource.data.group);
    }

    // Groups Collection
    match /groups/{groupId} {
      allow create: if request.auth != null; // Anyone can create a group

      allow read: if isGroupMember(groupId);
      allow update, delete: if isGroupAdmin();
    }

    // Group Data
    match /groups/{groupId}/{document=**} {
      allow read, write: if isGroupMember(groupId);
    }

    // Helper Functions
    function isGroupMember(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return request.auth != null && 
            request.auth.uid in groupData.users;
    }

    function isGroupAdmin() {
      return request.auth != null && request.auth.uid in resource.data.admins;
    }

    function canInvite(groupId) {
      return request.auth != null &&
         request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.admins
    }

    // function isAppAdmin() {
    //   return request.auth.token.role == "admin";
    // }
  }
}
